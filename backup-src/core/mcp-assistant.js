#!/usr/bin/env node
// ~/.mcp-terminal/mcp-assistant.js
//
// MCP Assistant - Um assistente de linha de comando para Linux
//
// Recursos:
// - Responde perguntas sobre comandos Linux
// - Detecta o sistema operacional e adapta respostas
// - Detecta pacotes instalados (firewalls, servidores web, etc.) e adapta respostas
// - Navega√ß√£o e manipula√ß√£o de arquivos
// - Hist√≥rico de comandos

import { Anthropic } from '@anthropic-ai/sdk';
import SystemDetector from '../libs/system_detector.js';
import fs from 'fs/promises';
import { existsSync, readFileSync, writeFileSync } from 'fs'; // Keep for sync ops if any, or specific needs
import path from 'path';
import { execSync, spawn } from 'child_process';
import ModelFactory from '../ai-models/model_factory.js';
import WebSearcher from '../web/search/index.js';
import readline from 'readline';
import os from 'os'; // For tmpdir and EOL

const CONFIG_PATH = path.join(process.env.HOME, '.mcp-terminal/config.json');
const HISTORY_PATH = path.join(process.env.HOME, '.mcp-terminal/command-history.json');

class MCPAssistant {
    constructor() {
        this.configPath = CONFIG_PATH;
        this.systemDetector = new SystemDetector();
        this.aiModel = null;
        this.webSearcher = null;
        this.config = {}; // Initialize config
        // loadConfig is called asynchronously, so ensure it's handled if methods depend on it immediately
    }

    async loadConfig() {
        try {
            if (!existsSync(this.configPath)) {
                console.error(`‚ùå Arquivo de configura√ß√£o n√£o encontrado em ${this.configPath}`);
                console.error('Execute: mcp-setup --configure');
                process.exit(1);
            }
            const configData = await fs.readFile(this.configPath, 'utf8');
            this.config = JSON.parse(configData);

            // Initialize web searcher if enabled
            if (this.config.web_search && this.config.web_search.enabled) {
                this.webSearcher = new WebSearcher(this.config.web_search);
                console.log('üåê Web search functionality initialized');
            }

            try {
                this.aiModel = await ModelFactory.createModel(this.config);
            } catch (error) {
                console.warn(`‚ö†Ô∏è  Aviso ao inicializar modelo de IA via ModelFactory: ${error.message}`);
                if (this.config.anthropic_api_key) {
                    console.log('üîÅ Tentando fallback para Anthropic SDK direto...');
                    this.anthropic = new Anthropic({
                        apiKey: this.config.anthropic_api_key,
                    });
                    // Mark that we are using fallback
                    this.usingFallbackAI = true;
                } else {
                    console.error('‚ùå Nenhuma API key da Anthropic configurada para fallback.');
                    throw new Error('Falha ao inicializar o modelo de IA e sem fallback configurado.');
                }
            }

        } catch (error) {
            console.error('‚ùå Erro cr√≠tico ao carregar configura√ß√£o ou inicializar IA:', error.message);
            console.error('Verifique sua configura√ß√£o ou execute: mcp-setup --configure');
            process.exit(1);
        }
    }

    async askCommand(question) {
        console.log('üîç askCommand called with question:', question);

        if (!this.aiModel && !this.anthropic) {
            console.log('‚ö†Ô∏è No AI model or Anthropic client initialized, loading config...');
            // This might happen if loadConfig hasn't completed or failed critically
            await this.loadConfig(); // Ensure config is loaded
            console.log('‚úÖ Config loaded, AI model initialized:', !!this.aiModel, 'Anthropic fallback:', !!this.anthropic);
        }

        try {
            // Verifica o tipo de consulta
            const isFirewallQuery = this.isFirewallBlockQuery(question);
            const isAsteriskQuery = this.isAsteriskQuery(question);
            const isPM2Query = this.isPM2Query(question);
            const isAWSS3Query = this.isAWSS3Query(question);

            console.log('üìä Query type detection:', {
                isFirewallQuery,
                isAsteriskQuery,
                isPM2Query,
                isAWSS3Query
            });

            // Obt√©m o contexto do sistema, incluindo IPs bloqueados se for uma consulta de firewall
            let systemContext = this.systemDetector.getSystemContext(isFirewallQuery);
            const currentDir = process.cwd();
            const dirInfo = await this.getCurrentDirectoryInfo();

            // Try to get web search results if enabled
            let webSearchResults = null;
            if (this.webSearcher && this.config.web_search && this.config.web_search.enabled) {
                try {
                    console.log('üîç Searching web for relevant information...');
                    webSearchResults = await this.webSearcher.searchDocumentation(question, {
                        os: systemContext.os,
                        distro: systemContext.distro,
                        version: systemContext.version,
                        language: 'bash' // Assuming Linux commands
                    });
                    console.log(`‚úÖ Found ${webSearchResults.results ? webSearchResults.results.length : 0} web search results`);
                } catch (error) {
                    console.warn(`‚ö†Ô∏è  Web search failed: ${error.message}`);
                    // Continue without web search results
                }
            }

            if (this.aiModel && !this.usingFallbackAI) {
                console.log('ü§ñ Using AI model:', this.aiModel.getModelName());
                // Ensure we have the installed packages information
                if (!systemContext.installedPackages) {
                    console.log('üì¶ Detecting installed packages...');
                    this.systemDetector.detectInstalledPackages();
                    // Update systemContext with the latest information
                    systemContext = this.systemDetector.getSystemContext();
                    console.log('‚úÖ Packages detected');
                }

                console.log('üîÑ Sending question to AI model...');
                const response = await this.aiModel.askCommand(question, {
                    ...systemContext,
                    currentDir,
                    dirInfo,
                    formattedPackages: this.formatInstalledPackages(systemContext.installedPackages),
                    webSearchResults: webSearchResults
                });
                console.log('‚úÖ Received response from AI model');
                return response;
            }

            // Fallback para o sistema antigo (Claude direto via Anthropic SDK)
            if (!this.anthropic) {
                console.log('‚ùå Anthropic fallback client not initialized');
                return '‚ùå Erro: Cliente Anthropic (fallback) n√£o inicializado. Verifique sua API key.';
            }

            console.log('üîÑ Using Anthropic fallback client');

            // Format web search results if available
            let webSearchSection = '';
            if (webSearchResults && webSearchResults.results && webSearchResults.results.length > 0) {
                webSearchSection = `
RESULTADOS DE BUSCA NA WEB:
${webSearchResults.results.map((result, index) => 
  `${index + 1}. ${result.title}
   URL: ${result.url}
   Fonte: ${result.source}
   Resumo: ${result.snippet}`
).join('\n\n')}
`;
            }

            // Formata informa√ß√µes detalhadas com base no tipo de consulta
            let detailedSection = '';

            // Informa√ß√µes de firewall para consultas de firewall
            if (isFirewallQuery && systemContext.firewallDetails && systemContext.firewallDetails.blockedIPs) {
                detailedSection = this.formatFirewallBlockedIPs(systemContext.firewallDetails);
            }

            // Informa√ß√µes de Asterisk para consultas de VoIP
            if (isAsteriskQuery && systemContext.installedPackages && systemContext.installedPackages.asterisk) {
                detailedSection += this.formatAsteriskDetails(systemContext.installedPackages.asterisk);
            }

            // Informa√ß√µes de PM2 para consultas de gerenciamento de processos Node.js
            if (isPM2Query && systemContext.installedPackages && systemContext.installedPackages.pm2) {
                detailedSection += this.formatPM2Details(systemContext.installedPackages.pm2);
            }

            // Informa√ß√µes de AWS S3 para consultas relacionadas a S3
            if (isAWSS3Query && systemContext.installedPackages && systemContext.installedPackages.awsCLI) {
                detailedSection += this.formatAWSS3Details(systemContext.installedPackages.awsCLI);
            }

            const prompt = `Voc√™ √© um assistente especializado em Linux/Unix que ajuda usu√°rios a encontrar o comando correto para suas tarefas.

INFORMA√á√ïES DO SISTEMA:
- OS: ${systemContext.os}
- Distribui√ß√£o: ${systemContext.distro}
- Vers√£o: ${systemContext.version}
- Package Manager: ${systemContext.packageManager}
- Shell: ${systemContext.shell}
- Arquitetura: ${systemContext.architecture}
- Kernel: ${systemContext.kernel}
- Capacidades: ${systemContext.capabilities.join(', ') || 'N/A'}

PACOTES INSTALADOS:
${this.formatInstalledPackages(systemContext.installedPackages)}
${detailedSection}

DIRET√ìRIO ATUAL: ${currentDir}
${dirInfo}

COMANDOS DISPON√çVEIS NESTE SISTEMA (amostra ou relevantes, se aplic√°vel):
${systemContext.commands && systemContext.commands.length > 0 ? JSON.stringify(systemContext.commands.slice(0, 20), null, 2) + (systemContext.commands.length > 20 ? "\n(e mais...)" : "") : "N√£o especificado"}
${webSearchSection}
PERGUNTA DO USU√ÅRIO: ${question}

INSTRU√á√ïES:
1. Analise a pergunta considerando o sistema espec√≠fico do usu√°rio e os pacotes instalados.
2. Se a pergunta for sobre um tipo espec√≠fico de software (firewall, servidor web, etc.), adapte sua resposta com base nos pacotes detectados no sistema.
3. Forne√ßa o comando exato para a distribui√ß√£o/sistema detectado e os pacotes instalados.
4. Explique brevemente o que o comando faz.
5. Se houver varia√ß√µes por distribui√ß√£o ou pacote instalado, mencione isso.
6. Inclua op√ß√µes √∫teis do comando.
7. Se apropriado, sugira comandos relacionados.
8. Se a pergunta for sobre IPs bloqueados ou firewalls, forne√ßa uma resposta detalhada com base nas informa√ß√µes de firewall dispon√≠veis.
9. Se a pergunta for sobre Asterisk (VoIP), forne√ßa comandos espec√≠ficos para gerenciar ramais, chamadas, peers SIP, etc.
10. Se a pergunta for sobre PM2 (gerenciador de processos Node.js), forne√ßa comandos para monitorar, reiniciar ou gerenciar aplica√ß√µes.
11. Se a pergunta for sobre AWS S3, forne√ßa comandos espec√≠ficos para opera√ß√µes com buckets, sincroniza√ß√£o, upload/download, etc.

FORMATO DA RESPOSTA (use este formato estritamente):
üîß COMANDO:
\`\`\`bash
comando exato aqui
\`\`\`

üìù EXPLICA√á√ÉO:
[Explica√ß√£o clara do que faz]

üí° OP√á√ïES √öTEIS:
[Varia√ß√µes ou op√ß√µes importantes]

‚ö†Ô∏è OBSERVA√á√ïES:
[Avisos ou considera√ß√µes especiais]

Responda de forma direta e pr√°tica. Se o comando for multi-linha, coloque cada parte em uma nova linha dentro do bloco de c√≥digo bash.

FORMATOS ESPECIAIS PARA CONSULTAS ESPEC√çFICAS:

1. PARA CONSULTAS DE FIREWALL/IPS BLOQUEADOS:
Se a pergunta for sobre IPs bloqueados, use este formato adicional:

üõ°Ô∏è IPS BLOQUEADOS:
[Lista formatada de IPs bloqueados por firewall]

üîß COMANDOS PARA GERENCIAR:
[Comandos para desbloquear IPs ou gerenciar regras]

2. PARA CONSULTAS DE ASTERISK (VoIP):
Se a pergunta for sobre Asterisk ou telefonia VoIP, use este formato adicional:

üìû STATUS DO ASTERISK:
[Informa√ß√µes sobre status, vers√£o, peers registrados, canais ativos]

üîß COMANDOS ESPEC√çFICOS:
[Comandos espec√≠ficos para a tarefa solicitada]

3. PARA CONSULTAS DE PM2 (GERENCIADOR DE PROCESSOS):
Se a pergunta for sobre PM2 ou aplica√ß√µes Node.js, use este formato adicional:

üìä APLICA√á√ïES EM EXECU√á√ÉO:
[Lista de aplica√ß√µes, status, uso de recursos]

üîß COMANDOS DE GERENCIAMENTO:
[Comandos espec√≠ficos para monitorar, reiniciar ou gerenciar aplica√ß√µes]

4. PARA CONSULTAS DE AWS S3:
Se a pergunta for sobre AWS S3, use este formato adicional:

‚òÅÔ∏è INFORMA√á√ïES DE S3:
[Informa√ß√µes sobre buckets, configura√ß√£o, regi√£o]

üîß COMANDOS S3:
[Comandos espec√≠ficos para opera√ß√µes com buckets, sincroniza√ß√£o, upload/download]`;

            const modelToUse = this.config.claude_model || this.config.model || "claude-3-sonnet-20240229"; // Exemplo de nome de modelo v√°lido
            console.log('ü§ñ Using Anthropic model:', modelToUse);

            try {
                console.log('üîÑ Sending request to Anthropic API...');
                const response = await this.anthropic.messages.create({
                    model: modelToUse,
                    max_tokens: 2000,
                    messages: [{ role: 'user', content: prompt }],
                });

                console.log('‚úÖ Received response from Anthropic API');
                if (response && response.content && response.content.length > 0) {
                    const responseText = response.content[0].text;
                    return responseText;
                } else {
                    console.log('‚ö†Ô∏è Empty or invalid response from Anthropic API:', response);
                    return '‚ùå Erro: Resposta vazia ou inv√°lida da API Anthropic.';
                }
            } catch (apiError) {
                console.error('‚ùå Anthropic API error:', apiError);
                return `‚ùå Erro na API Anthropic: ${apiError.message}`;
            }
        } catch (error) {
            console.error('‚ùå Erro ao consultar assistente:', error.message);
            console.error('Stack trace:', error.stack);
            return `‚ùå Erro ao conectar com o assistente: ${error.message}\nVerifique sua configura√ß√£o e a API key.`;
        }
    }

    async getCurrentDirectoryInfo() {
        try {
            // Lista alguns arquivos e diret√≥rios do diret√≥rio atual
            let files = [];
            let dirs = [];
            try {
                const entries = await fs.readdir('.', { withFileTypes: true });
                files = entries.filter(e => e.isFile()).map(e => e.name).slice(0, 10); // Show more
                dirs = entries.filter(e => e.isDirectory()).map(e => e.name).slice(0, 5);
            } catch (e) {
                // Silently ignore if can't read dir, e.g. permissions
            }

            let projectType = [];
            // Check for common project files
            const projectFiles = {
                'Node.js': 'package.json',
                'Rust': 'Cargo.toml',
                'Go': 'go.mod',
                'Python': 'requirements.txt',
                'Make': 'Makefile',
                'Git Repo': '.git', // .git is a directory
            };

            for (const [type, fileOrDir] of Object.entries(projectFiles)) {
                try {
                    await fs.access(fileOrDir); // Checks existence
                    projectType.push(type);
                } catch { /* File/dir not found */ }
            }

            return `
INFORMA√á√ïES DO DIRET√ìRIO:
- Tipo de projeto detectado: ${projectType.length > 0 ? projectType.join(', ') : 'Gen√©rico'}
- Primeiros arquivos: ${files.join(', ') || 'Nenhum vis√≠vel'}
- Primeiros diret√≥rios: ${dirs.join(', ') || 'Nenhum vis√≠vel'}`;

        } catch (error) {
            console.warn(`‚ö†Ô∏è  N√£o foi poss√≠vel obter informa√ß√µes detalhadas do diret√≥rio: ${error.message}`);
            return 'INFORMA√á√ïES DO DIRET√ìRIO: N√£o foi poss√≠vel carregar.';
        }
    }

    async saveCommandHistory(question, command) {
        try {
            let history = [];
            if (existsSync(HISTORY_PATH)) {
                const content = await fs.readFile(HISTORY_PATH, 'utf8');
                history = JSON.parse(content);
            }

            history.unshift({
                timestamp: new Date().toISOString(),
                question,
                command,
                system: this.systemDetector.getSystemContext().distro || this.systemDetector.getSystemContext().os, // Simpler system info
                provider: (this.aiModel && !this.usingFallbackAI) ? this.aiModel.getProviderName() : 'Anthropic (Fallback)',
            });

            history = history.slice(0, 100); // Manter apenas os √∫ltimos 100
            await fs.writeFile(HISTORY_PATH, JSON.stringify(history, null, 2));
        } catch (error) {
            console.error('‚ùå Erro ao salvar hist√≥rico:', error.message);
        }
    }

    getProviderInfo() {
        const info = {
            provider: 'Unknown',
            model: 'Unknown',
            apiKeyConfigured: false,
            webSearchEnabled: false,
            firecrawlConfigured: false
        };

        if (this.aiModel && !this.usingFallbackAI) {
            info.provider = this.aiModel.getProviderName();
            info.model = this.aiModel.getModelName();
        } else if (this.usingFallbackAI) {
            info.provider = 'Anthropic (Fallback)';
            info.model = this.config.claude_model || this.config.model || "claude-3-sonnet-20240229";
        }

        // Check API key status
        if (this.config.anthropic_api_key && this.config.anthropic_api_key !== 'YOUR_ANTHROPIC_API_KEY') {
            info.apiKeyConfigured = true;
        } else if (this.config.openai_api_key && this.config.openai_api_key !== 'YOUR_OPENAI_API_KEY') {
            info.apiKeyConfigured = true;
        } else if (this.config.gemini_api_key && this.config.gemini_api_key !== 'YOUR_GEMINI_API_KEY') {
            info.apiKeyConfigured = true;
        }

        // Check web search status
        info.webSearchEnabled = this.config.web_search && this.config.web_search.enabled;

        // Check Firecrawl status
        info.firecrawlConfigured = this.config.firecrawl_api_key &&
                                   this.config.firecrawl_api_key !== 'YOUR_FIRECRAWL_API_KEY';

        return info;
    }

    // Verifica se a pergunta √© sobre IPs bloqueados ou firewalls
    isFirewallBlockQuery(question) {
        const firewallKeywords = [
            'firewall', 'ips bloqueados', 'ip bloqueado', 'bloqueio', 'bloqueados',
            'ufw', 'iptables', 'firewalld', 'fail2ban', 'csf', 'shorewall', 'pf',
            'regras de bloqueio', 'conex√µes bloqueadas', 'endere√ßos bloqueados',
            'bloquear ip', 'listar bloqueios', 'mostrar bloqueios', 'ver bloqueios'
        ];

        // Vers√£o em ingl√™s para compatibilidade
        const englishKeywords = [
            'blocked ip', 'blocked ips', 'firewall block', 'ip block', 'blocked address',
            'list blocks', 'show blocks', 'view blocks', 'blocked connections'
        ];

        const normalizedQuestion = question.toLowerCase();

        // Verifica se alguma das palavras-chave est√° presente na pergunta
        return [...firewallKeywords, ...englishKeywords].some(keyword =>
            normalizedQuestion.includes(keyword)
        );
    }

    // Verifica se a pergunta √© sobre Asterisk (VoIP)
    isAsteriskQuery(question) {
        const asteriskKeywords = [
            'asterisk', 'voip', 'telefonia', 'telefone', 'ramal', 'ramais', 'sip',
            'chamada', 'chamadas', 'liga√ß√£o', 'liga√ß√µes', 'pabx', 'pbx', 'canal',
            'canais', 'extens√£o', 'extens√µes', 'registro sip', 'registros sip',
            'peer', 'peers', 'trunk', 'trunks', 'dialplan', 'codec', 'codecs'
        ];

        // Vers√£o em ingl√™s para compatibilidade
        const englishKeywords = [
            'extension', 'extensions', 'phone', 'call', 'calls', 'sip register',
            'sip registry', 'voip server', 'pbx', 'channel', 'channels'
        ];

        const normalizedQuestion = question.toLowerCase();

        // Verifica se alguma das palavras-chave est√° presente na pergunta
        return [...asteriskKeywords, ...englishKeywords].some(keyword =>
            normalizedQuestion.includes(keyword)
        );
    }

    // Verifica se a pergunta √© sobre PM2 (Process Manager)
    isPM2Query(question) {
        const pm2Keywords = [
            'pm2', 'process manager', 'gerenciador de processo', 'node.js', 'nodejs',
            'aplica√ß√£o node', 'aplica√ß√µes node', 'app node', 'apps node',
            'monitorar processo', 'monitorar processos', 'monitoramento de processo',
            'reiniciar app', 'reiniciar aplica√ß√£o', 'logs de aplica√ß√£o', 'logs de app',
            'mem√≥ria de aplica√ß√£o', 'cpu de aplica√ß√£o', 'aplica√ß√£o travando',
            'aplica√ß√£o caindo', 'aplica√ß√£o reiniciando', 'ecosystem', 'ecossistema'
        ];

        // Vers√£o em ingl√™s para compatibilidade
        const englishKeywords = [
            'node app', 'node application', 'process monitoring', 'restart app',
            'application logs', 'app logs', 'app memory', 'app cpu', 'app crashing',
            'app restarting', 'node process'
        ];

        const normalizedQuestion = question.toLowerCase();

        // Verifica se alguma das palavras-chave est√° presente na pergunta
        return [...pm2Keywords, ...englishKeywords].some(keyword =>
            normalizedQuestion.includes(keyword)
        );
    }

    // Verifica se a pergunta √© sobre AWS S3
    isAWSS3Query(question) {
        const s3Keywords = [
            's3', 'aws', 'amazon s3', 'bucket', 'buckets', 'aws cli', 'cli aws',
            'sincronizar s3', 'sincronizar com s3', 'upload s3', 'download s3',
            'copiar para s3', 'copiar do s3', 'backup s3', 'backup para s3',
            'armazenamento em nuvem', 'armazenamento na nuvem', 'objeto s3',
            'objetos s3', 'url tempor√°ria', 'url pr√©-assinada', 'presigned url'
        ];

        // Vers√£o em ingl√™s para compatibilidade
        const englishKeywords = [
            'cloud storage', 's3 sync', 'sync to s3', 's3 upload', 's3 download',
            'copy to s3', 'copy from s3', 's3 backup', 'backup to s3', 's3 object',
            's3 objects', 'temporary url', 'presigned url'
        ];

        const normalizedQuestion = question.toLowerCase();

        // Verifica se alguma das palavras-chave est√° presente na pergunta
        return [...s3Keywords, ...englishKeywords].some(keyword =>
            normalizedQuestion.includes(keyword)
        );
    }

    // Formata informa√ß√µes de IPs bloqueados para o prompt
    formatFirewallBlockedIPs(firewallDetails) {
        if (!firewallDetails || !firewallDetails.blockedIPs) {
            return '';
        }

        let result = "\n\nINFORMA√á√ïES DE FIREWALL DETALHADAS:";
        result += `\n- Firewalls ativos: ${firewallDetails.activeFirewalls.join(', ')}`;

        // Para cada firewall, formata os IPs bloqueados
        for (const [firewallName, firewallData] of Object.entries(firewallDetails.blockedIPs)) {
            if (!firewallData.success) {
                result += `\n\n${firewallName.toUpperCase()}: Erro ao obter informa√ß√µes (${firewallData.error || 'Erro desconhecido'})`;
                continue;
            }

            if (!firewallData.blockedIPs || firewallData.blockedIPs.length === 0) {
                result += `\n\n${firewallName.toUpperCase()}: Nenhum IP bloqueado encontrado`;
                continue;
            }

            result += `\n\n${firewallName.toUpperCase()} (${firewallData.blockedIPs.length} IPs bloqueados):`;

            // Limita a quantidade de IPs mostrados para n√£o sobrecarregar o prompt
            const maxIPsToShow = 15;
            const ipsToShow = firewallData.blockedIPs.slice(0, maxIPsToShow);

            for (const blockedIP of ipsToShow) {
                result += `\n- IP: ${blockedIP.ip}`;
                if (blockedIP.direction) result += `, Dire√ß√£o: ${blockedIP.direction}`;
                if (blockedIP.type) result += `, Tipo: ${blockedIP.type}`;
                if (blockedIP.formattedTime) result += `, Expira em: ${blockedIP.formattedTime}`;
                if (blockedIP.comment) result += `, Coment√°rio: ${blockedIP.comment}`;
            }

            if (firewallData.blockedIPs.length > maxIPsToShow) {
                result += `\n- ... e mais ${firewallData.blockedIPs.length - maxIPsToShow} IPs (omitidos para brevidade)`;
            }

            // Adiciona comandos espec√≠ficos para este firewall
            result += `\n\nComandos para ${firewallName}:`;
            switch (firewallName) {
                case 'ufw':
                    result += `
- Listar regras: ufw status numbered
- Desbloquear IP: ufw delete deny from <ip>
- Ver logs: grep "BLOCK" /var/log/ufw.log`;
                    break;
                case 'firewalld':
                    result += `
- Listar regras: firewall-cmd --list-all
- Desbloquear IP: firewall-cmd --permanent --remove-rich-rule='rule family="ipv4" source address="<ip>" reject'
- Ver logs: journalctl -u firewalld`;
                    break;
                case 'iptables':
                    result += `
- Listar regras: iptables -L -n -v
- Desbloquear IP: iptables -D INPUT -s <ip> -j DROP
- Ver logs: grep "DROP" /var/log/kern.log`;
                    break;
                case 'fail2ban':
                    result += `
- Listar jails: fail2ban-client status
- Desbloquear IP: fail2ban-client set <jail> unbanip <ip>
- Ver logs: tail -f /var/log/fail2ban.log`;
                    break;
                case 'csf':
                    result += `
- Listar bloqueios: cat /etc/csf/csf.deny
- Desbloquear IP: csf -dr <ip>
- Ver logs: grep <ip> /var/log/lfd.log`;
                    break;
                case 'shorewall':
                    result += `
- Listar regras: shorewall show blacklists
- Desbloquear IP: shorewall allow <ip>
- Ver logs: grep <ip> /var/log/messages`;
                    break;
                case 'pf':
                    result += `
- Listar regras: pfctl -s rules
- Desbloquear IP: pfctl -t <table> -T delete <ip>
- Ver logs: tcpdump -n -e -ttt -i pflog0`;
                    break;
                default:
                    result += `
- Consulte a documenta√ß√£o espec√≠fica para este firewall`;
            }
        }

        return result;
    }

    // Formata informa√ß√µes detalhadas do Asterisk para o prompt
    formatAsteriskDetails(asterisk) {
        if (!asterisk) {
            return '';
        }

        let result = "\n\nINFORMA√á√ïES DETALHADAS DO ASTERISK:";
        result += `\n- Status: ${asterisk.active ? 'Ativo' : 'Inativo'}`;
        if (asterisk.version) {
            result += `\n- Vers√£o: ${asterisk.version}`;
        }

        // Adiciona informa√ß√µes de peers e canais
        if (asterisk.registeredPeers > 0) {
            result += `\n- Peers SIP registrados: ${asterisk.registeredPeers}`;
        } else {
            result += `\n- Peers SIP registrados: Nenhum ou n√£o dispon√≠vel`;
        }

        if (asterisk.activeChannels > 0) {
            result += `\n- Canais ativos: ${asterisk.activeChannels}`;
        } else {
            result += `\n- Canais ativos: Nenhum`;
        }

        // Adiciona detalhes de configura√ß√£o se dispon√≠veis
        if (asterisk.configDetails) {
            result += `\n- Diret√≥rio de configura√ß√£o: ${asterisk.configDetails.configPath || '/etc/asterisk'}`;
            result += `\n- Diret√≥rio de logs: ${asterisk.configDetails.logPath || '/var/log/asterisk'}`;
            if (asterisk.configDetails.uptime) {
                result += `\n- Uptime: ${asterisk.configDetails.uptime}`;
            }
        }

        // Adiciona comandos √∫teis para Asterisk
        result += `\n\nCOMANDOS √öTEIS PARA ASTERISK:`;
        result += `
- Verificar status: systemctl status asterisk
- Ver peers SIP: asterisk -rx "sip show peers"
- Ver registros SIP: asterisk -rx "sip show registry"
- Ver canais ativos: asterisk -rx "core show channels"
- Recarregar configura√ß√£o SIP: asterisk -rx "sip reload"
- Reiniciar sem derrubar chamadas: asterisk -rx "core restart gracefully"
- Ver logs em tempo real: tail -f /var/log/asterisk/full
- Verificar configura√ß√£o: asterisk -T
- Ver vers√£o: asterisk -rx "core show version"
- Ver uptime: asterisk -rx "core show uptime"
- Ver m√≥dulos carregados: asterisk -rx "module show"
- Ver dialplan: asterisk -rx "dialplan show"`;

        return result;
    }

    // Formata informa√ß√µes detalhadas do PM2 para o prompt
    formatPM2Details(pm2) {
        if (!pm2) {
            return '';
        }

        let result = "\n\nINFORMA√á√ïES DETALHADAS DO PM2:";
        result += `\n- Status: ${pm2.active ? 'Ativo' : 'Instalado mas sem aplica√ß√µes ativas'}`;
        if (pm2.version) {
            result += `\n- Vers√£o: ${pm2.version}`;
        }

        // Adiciona informa√ß√µes de aplica√ß√µes
        if (pm2.runningApps > 0) {
            result += `\n- Aplica√ß√µes em execu√ß√£o: ${pm2.runningApps}`;

            // Adiciona detalhes das aplica√ß√µes se dispon√≠veis
            if (pm2.appDetails && pm2.appDetails.apps && pm2.appDetails.apps.length > 0) {
                result += `\n\nAPLICA√á√ïES EM EXECU√á√ÉO:`;
                for (const app of pm2.appDetails.apps) {
                    result += `\n- Nome: ${app.name}`;
                    result += `, Status: ${app.status}`;
                    if (app.memory) result += `, Mem√≥ria: ${typeof app.memory === 'number' ? `${Math.round(app.memory / (1024 * 1024))} MB` : app.memory}`;
                    if (app.cpu) result += `, CPU: ${app.cpu}%`;
                    if (app.restarts) result += `, Restarts: ${app.restarts}`;
                }

                if (pm2.appDetails.apps.length < pm2.runningApps) {
                    result += `\n- ... e mais ${pm2.runningApps - pm2.appDetails.apps.length} aplica√ß√µes (omitidas para brevidade)`;
                }
            }
        } else {
            result += `\n- Aplica√ß√µes em execu√ß√£o: Nenhuma`;
        }

        // Adiciona comandos √∫teis para PM2
        result += `\n\nCOMANDOS √öTEIS PARA PM2:`;
        result += `
- Listar aplica√ß√µes: pm2 list
- Monitorar em tempo real: pm2 monit
- Ver logs de todas as aplica√ß√µes: pm2 logs
- Ver logs de uma aplica√ß√£o espec√≠fica: pm2 logs [app-name]
- Reiniciar aplica√ß√£o: pm2 restart [app-name]
- Recarregar aplica√ß√£o (zero downtime): pm2 reload [app-name]
- Parar aplica√ß√£o: pm2 stop [app-name]
- Remover aplica√ß√£o: pm2 delete [app-name]
- Configurar inicializa√ß√£o autom√°tica: pm2 startup
- Salvar configura√ß√£o atual: pm2 save
- Ver detalhes de uma aplica√ß√£o: pm2 show [app-name]
- Iniciar nova aplica√ß√£o: pm2 start app.js --name [app-name]
- Iniciar com op√ß√µes avan√ßadas: pm2 start app.js --name [app-name] --watch --max-memory-restart 300M
- Limpar logs: pm2 flush
- Recarregar logs: pm2 reloadLogs
- Verificar status do daemon: pm2 ping
- Atualizar PM2: pm2 update
- Gerar arquivo ecosystem: pm2 ecosystem
- Iniciar usando ecosystem: pm2 start ecosystem.config.js`;

        return result;
    }

    // Formata informa√ß√µes detalhadas do AWS S3 para o prompt
    formatAWSS3Details(awsCLI) {
        if (!awsCLI) {
            return '';
        }

        let result = "\n\nINFORMA√á√ïES DETALHADAS DO AWS CLI (S3):";
        result += `\n- Status: ${awsCLI.configured ? 'Configurado' : 'Instalado mas n√£o configurado'}`;
        if (awsCLI.version) {
            result += `\n- Vers√£o: ${awsCLI.version}`;
        }

        // Adiciona informa√ß√µes de configura√ß√£o
        if (awsCLI.configured) {
            result += `\n- Regi√£o padr√£o: ${awsCLI.defaultRegion || 'N√£o definida'}`;

            // Adiciona detalhes de configura√ß√£o se dispon√≠veis
            if (awsCLI.configDetails) {
                if (awsCLI.configDetails.profile) {
                    result += `\n- Perfil: ${awsCLI.configDetails.profile}`;
                }
                if (awsCLI.configDetails.outputFormat) {
                    result += `\n- Formato de sa√≠da: ${awsCLI.configDetails.outputFormat}`;
                }
            }

            // Adiciona informa√ß√µes de buckets
            if (awsCLI.buckets && awsCLI.buckets.length > 0) {
                result += `\n\nBUCKETS DISPON√çVEIS (${awsCLI.buckets.length}):`;
                for (const bucket of awsCLI.buckets) {
                    result += `\n- ${bucket}`;
                }
            } else {
                result += `\n- Buckets dispon√≠veis: Nenhum ou sem permiss√£o para listar`;
            }
        }

        // Adiciona comandos √∫teis para AWS S3
        result += `\n\nCOMANDOS √öTEIS PARA AWS S3:`;
        result += `
- Listar buckets: aws s3 ls
- Listar objetos em um bucket: aws s3 ls s3://[bucket-name]
- Listar objetos recursivamente: aws s3 ls s3://[bucket-name] --recursive
- Criar bucket: aws s3 mb s3://[bucket-name]
- Remover bucket: aws s3 rb s3://[bucket-name]
- Copiar arquivo para S3: aws s3 cp [local-file] s3://[bucket-name]/[path]
- Copiar arquivo do S3: aws s3 cp s3://[bucket-name]/[path] [local-file]
- Sincronizar diret√≥rio para S3: aws s3 sync [local-dir] s3://[bucket-name]/[path]
- Sincronizar diret√≥rio do S3: aws s3 sync s3://[bucket-name]/[path] [local-dir]
- Remover objeto: aws s3 rm s3://[bucket-name]/[path]
- Gerar URL tempor√°ria: aws s3 presign s3://[bucket-name]/[path] --expires-in [seconds]
- Ver tamanho do bucket: aws s3 ls s3://[bucket-name] --recursive --human-readable --summarize
- Configurar concorr√™ncia: aws configure set default.s3.max_concurrent_requests [number]
- Configurar tamanho de chunk: aws configure set default.s3.multipart_chunksize [size]
- Habilitar acelera√ß√£o: aws s3 cp --endpoint-url=https://s3-accelerate.amazonaws.com`;

        return result;
    }

    // Formata informa√ß√µes de pacotes instalados para o prompt
    formatInstalledPackages(packages) {
        if (!packages) return "- Nenhuma informa√ß√£o de pacotes dispon√≠vel";

        let result = "";

        // Formata firewalls
        if (packages.firewalls && packages.firewalls.length > 0) {
            result += "- Firewalls: ";
            result += packages.firewalls.map(fw =>
                `${fw.name}${fw.active ? ' (ativo)' : ' (inativo)'}`
            ).join(", ");
            result += "\n";
        } else {
            result += "- Firewalls: Nenhum detectado\n";
        }

        // Formata servidores web
        if (packages.webServers && packages.webServers.length > 0) {
            result += "- Servidores Web: ";
            result += packages.webServers.map(server =>
                `${server.name}${server.active ? ' (ativo)' : ' (inativo)'}`
            ).join(", ");
            result += "\n";
        } else {
            result += "- Servidores Web: Nenhum detectado\n";
        }

        // Formata bancos de dados
        if (packages.databases && packages.databases.length > 0) {
            result += "- Bancos de Dados: ";
            result += packages.databases.map(db =>
                `${db.name}${db.active ? ' (ativo)' : ' (inativo)'}`
            ).join(", ");
            result += "\n";
        } else {
            result += "- Bancos de Dados: Nenhum detectado\n";
        }

        // Formata ferramentas de cont√™iner
        if (packages.containerTools && packages.containerTools.length > 0) {
            result += "- Ferramentas de Cont√™iner: ";
            result += packages.containerTools.map(tool =>
                `${tool.name}${tool.active ? ' (ativo)' : ' (inativo)'}`
            ).join(", ");
            result += "\n";
        } else {
            result += "- Ferramentas de Cont√™iner: Nenhuma detectada\n";
        }

        // Formata ferramentas de monitoramento
        if (packages.monitoringTools && packages.monitoringTools.length > 0) {
            result += "- Ferramentas de Monitoramento: ";
            result += packages.monitoringTools.map(tool =>
                `${tool.name}${tool.active ? ' (ativo)' : ' (inativo)'}`
            ).join(", ");
            result += "\n";
        } else {
            result += "- Ferramentas de Monitoramento: Nenhuma detectada\n";
        }

        // Formata Asterisk (VoIP)
        if (packages.asterisk) {
            result += "- Asterisk (VoIP): ";
            result += `${packages.asterisk.details}`;
            if (packages.asterisk.registeredPeers > 0) {
                result += `, ${packages.asterisk.registeredPeers} peers registrados`;
            }
            if (packages.asterisk.activeChannels > 0) {
                result += `, ${packages.asterisk.activeChannels} canais ativos`;
            }
            result += "\n";
        } else {
            result += "- Asterisk (VoIP): N√£o detectado\n";
        }

        // Formata PM2 (Process Manager)
        if (packages.pm2) {
            result += "- PM2 (Process Manager): ";
            result += `${packages.pm2.details}`;
            result += "\n";
        } else {
            result += "- PM2 (Process Manager): N√£o detectado\n";
        }

        // Formata AWS CLI (S3)
        if (packages.awsCLI) {
            result += "- AWS CLI (S3): ";
            result += `${packages.awsCLI.details}`;
            if (packages.awsCLI.buckets && packages.awsCLI.buckets.length > 0) {
                result += `, ${packages.awsCLI.buckets.length} buckets dispon√≠veis`;
            }
        } else {
            result += "- AWS CLI (S3): N√£o detectado";
        }

        return result;
    }

    async listDirectory(dirPath = '.') {
        try {
            const absolutePath = path.resolve(dirPath);
            const entries = await fs.readdir(absolutePath, { withFileTypes: true });
            const items = entries.map(entry => ({
                name: entry.name,
                type: entry.isDirectory() ? 'directory' : 'file',
                path: path.join(absolutePath, entry.name),
            })).sort((a,b) => { // Sort directories first, then files, then alphabetically
                if (a.type === b.type) return a.name.localeCompare(b.name);
                return a.type === 'directory' ? -1 : 1;
            });

            return {
                currentPath: absolutePath,
                parent: path.dirname(absolutePath),
                items,
            };
        } catch (error) {
            console.error(`‚ùå Erro ao listar diret√≥rio ${dirPath}:`, error.message);
            throw error; // Re-throw para ser tratado pelo chamador
        }
    }

    async readFile(filePath) {
        try {
            const absolutePath = path.resolve(filePath);
            return await fs.readFile(absolutePath, 'utf8');
        } catch (error) {
            console.error(`‚ùå Erro ao ler arquivo ${filePath}:`, error.message);
            throw error;
        }
    }

    async editFile(filePath) {
        const absolutePath = path.resolve(filePath);
        let currentContent = '';
        try {
            currentContent = await fs.readFile(absolutePath, 'utf8');
        } catch (error) {
            if (error.code === 'ENOENT') {
                console.log(`üìù Arquivo n√£o existe. Ser√° criado: ${absolutePath}`);
            } else {
                console.error(`‚ùå Erro ao ler arquivo para edi√ß√£o ${absolutePath}:`, error.message);
                throw error;
            }
        }

        const tempDir = os.tmpdir();
        const tempFileName = `mcp-edit-${Date.now()}-${path.basename(absolutePath)}`;
        const tempFilePath = path.join(tempDir, tempFileName);

        try {
            await fs.writeFile(tempFilePath, currentContent, 'utf8');

            const editor = process.env.EDITOR || process.env.VISUAL || 'nano'; // Default to nano
            console.log(`\n‚úèÔ∏è  Abrindo ${absolutePath} com ${editor}... (Salve e feche o editor para continuar)`);

            await new Promise((resolve, reject) => {
                const editorProcess = spawn(editor, [tempFilePath], { stdio: 'inherit' });
                editorProcess.on('exit', (code) => {
                    if (code === 0) {
                        resolve();
                    } else {
                        reject(new Error(`Editor ${editor} saiu com c√≥digo de erro ${code}.`));
                    }
                });
                editorProcess.on('error', (err) => {
                    reject(new Error(`Falha ao iniciar o editor ${editor}: ${err.message}`));
                });
            });

            const newContent = await fs.readFile(tempFilePath, 'utf8');
            await fs.writeFile(absolutePath, newContent, 'utf8');
            console.log(`\n‚úÖ Arquivo salvo com sucesso: ${absolutePath}`);
            return true;

        } catch (error) {
            console.error(`‚ùå Erro durante a edi√ß√£o do arquivo ${absolutePath}:`, error.message);
            throw error;
        } finally {
            // Clean up temporary file
            try {
                await fs.unlink(tempFilePath);
            } catch (e) {
                // Ignore errors during temp file cleanup, but log them
                console.warn(`‚ö†Ô∏è  N√£o foi poss√≠vel remover o arquivo tempor√°rio: ${tempFilePath}`, e.message);
            }
        }
    }


    async removeItem(itemPath) {
        try {
            const absolutePath = path.resolve(itemPath);
            const stats = await fs.stat(absolutePath);

            if (stats.isDirectory()) {
                await fs.rm(absolutePath, { recursive: true, force: true });
                return { success: true, type: 'directory' };
            } else {
                await fs.unlink(absolutePath);
                return { success: true, type: 'file' };
            }
        } catch (error) {
            console.error(`‚ùå Erro ao remover item ${itemPath}:`, error.message);
            throw error;
        }
    }

    async getItemInfo(itemPath) {
        try {
            const absolutePath = path.resolve(itemPath);
            const stats = await fs.stat(absolutePath);
            const info = {
                path: absolutePath,
                name: path.basename(absolutePath),
                size: stats.size,
                created: stats.birthtime,
                modified: stats.mtime,
                accessed: stats.atime,
                isDirectory: stats.isDirectory(),
                isFile: stats.isFile(),
                permissions: (stats.mode & 0o777).toString(8), // More reliable permission string
            };

            if (info.isDirectory) {
                try {
                    const entries = await fs.readdir(absolutePath);
                    info.contents = entries.length;
                } catch (e) {
                    info.contents = 'N/A';
                    info.error = `Sem permiss√£o para ler conte√∫do de ${absolutePath}`;
                }
            }
            return info;
        } catch (error) {
            console.error(`‚ùå Erro ao obter informa√ß√µes de ${itemPath}:`, error.message);
            throw error;
        }
    }
}

// CLI
async function main() {
    const args = process.argv.slice(2);

    if (args.length === 0 || args[0] === '--help' || args[0] === '-h') {
        console.log(`
ü§ñ MCP Terminal Assistant

USO:
  ask "sua pergunta sobre comando linux"
  ask --history                    # Ver hist√≥rico dos √∫ltimos 10 comandos
  ask --system-info                # Informa√ß√µes do sistema detectadas
  ask --provider-info              # Informa√ß√µes do provedor de IA atual
  ask --model                      # Ver modelo de IA em uso (atalho)
  ask --configure                  # Configurar provedor de IA e API key
  ask --web-search <on|off>        # Ativar/desativar busca na web
  ask --web-status                 # Ver status da busca na web
  ask --scrape <url>               # Extrair conte√∫do de uma p√°gina web
  ask --crawl <url> [--limit N]    # Rastrear um site web (limite opcional)
  ask --firecrawl-key <key>        # Configurar chave API do Firecrawl

OPERA√á√ïES DE ARQUIVOS:
  ask --list [caminho]             # Listar conte√∫do do diret√≥rio (padr√£o: .)
  ask --read <arquivo>             # Ler conte√∫do do arquivo
  ask --edit <arquivo>             # Editar arquivo usando $EDITOR (ou nano)
  ask --delete <caminho>           # Remover arquivo ou diret√≥rio (com confirma√ß√£o)
  ask --info <caminho>             # Informa√ß√µes detalhadas sobre arquivo/diret√≥rio

EXEMPLOS:
  ask "como listar arquivos por data de modifica√ß√£o"
  ask "encontrar arquivos maiores que 1GB em /var/log"
  ask --list /etc
  ask --read ~/.bashrc
  ask --edit ./meu_script.sh
        `);
        process.exit(0);
    }

    const assistant = new MCPAssistant();
    await assistant.loadConfig(); // Ensure config is loaded before proceeding

    const command = args[0].toLowerCase();
    const commandArg = args[1];

    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
    });

    // Fun√ß√£o de confirma√ß√£o usando promises
    const askConfirmation = (prompt) => {
        return new Promise((resolve) => {
            rl.question(prompt, (answer) => {
                resolve(answer && (answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes'));
            });
        });
    };

    try {
        switch (command) {
            case '--history':
                try {
                    const historyData = await fs.readFile(HISTORY_PATH, 'utf8');
                    const history = JSON.parse(historyData);
                    console.log('\nüìö √öltimos comandos sugeridos (at√© 10 mais recentes):\n');
                    history.slice(0, 10).forEach((entry, i) => {
                        console.log(`${i + 1}. Pergunta: ${entry.question}`);
                        console.log(`   üíª Comando: ${entry.command}`);
                        console.log(`   üìÖ Data: ${new Date(entry.timestamp).toLocaleString()}`);
                        if (entry.provider) console.log(`   ü§ñ Provedor: ${entry.provider}`);
                        if (entry.system) console.log(`   üñ•Ô∏è  Sistema: ${entry.system}`);
                        console.log('');
                    });
                } catch (err) {
                    if (err.code === 'ENOENT') console.log('Nenhum hist√≥rico encontrado.');
                    else console.error('‚ùå Erro ao ler hist√≥rico:', err.message);
                }
                break;

            case '--system-info':
                console.log('\nüñ•Ô∏è  Informa√ß√µes do Sistema Detectadas:\n');
                console.log(JSON.stringify(assistant.systemDetector.getSystemContext(), null, 2));
                break;

            case '--provider-info':
                const providerInfo = assistant.getProviderInfo();
                console.log('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
                console.log('‚ïë      ü§ñ CONFIGURA√á√ÉO DE IA ATUAL        ‚ïë');
                console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');
                console.log(`üì¶ Provedor: ${providerInfo.provider}`);
                console.log(`üß† Modelo: ${providerInfo.model}`);
                console.log(`üîë API Key: ${providerInfo.apiKeyConfigured ? '‚úÖ Configurada' : '‚ùå N√£o configurada'}`);
                console.log(`üåê Web Search: ${providerInfo.webSearchEnabled ? '‚úÖ Ativado' : '‚ö™ Desativado'}`);
                console.log(`üî• Firecrawl: ${providerInfo.firecrawlConfigured ? '‚úÖ Configurado' : '‚ö™ N√£o configurado'}`);
                console.log('\nüí° Dicas:');
                console.log('   ‚Ä¢ Para mudar o modelo: edite ~/.mcp-terminal/config.json');
                console.log('   ‚Ä¢ Para web search: ask --web-search on/off');
                console.log('   ‚Ä¢ Para ver todos os comandos: ask --help');
                break;

            case '--model':
                const modelInfo = assistant.getProviderInfo();
                console.log(`\nüß† Modelo de IA: ${modelInfo.provider} - ${modelInfo.model}`);
                if (!modelInfo.apiKeyConfigured) {
                    console.log('‚ö†Ô∏è  API Key n√£o configurada!');
                }
                break;

            case '--configure':
                console.log('\nüîß Iniciando configura√ß√£o interativa...\n');
                try {
                    // Import and run the configurator
                    const { spawn } = await import('child_process');
                    const configScript = path.join(path.dirname(import.meta.url.replace('file://', '')), 'configure-ai.js');

                    const configProcess = spawn('node', [configScript], {
                        stdio: 'inherit'
                    });

                    configProcess.on('close', (code) => {
                        if (code === 0) {
                            console.log('\n‚úÖ Configura√ß√£o conclu√≠da!');
                        } else {
                            console.log('\n‚ùå Configura√ß√£o cancelada ou falhou.');
                        }
                        process.exit(code);
                    });

                    // Don't continue with the rest of the script
                    return;
                } catch (error) {
                    console.error('‚ùå Erro ao iniciar configurador:', error.message);
                    console.log('üí° Tente executar diretamente: node ~/mcp-devops/configure-ai.js');
                }
                break;

            case '--web-search':
                if (!commandArg || (commandArg !== 'on' && commandArg !== 'off')) {
                    console.log('‚ùå Uso: ask --web-search <on|off>');
                    break;
                }

                try {
                    // Read current config
                    const configData = await fs.readFile(CONFIG_PATH, 'utf8');
                    const config = JSON.parse(configData);

                    // Ensure web_search section exists
                    if (!config.web_search) {
                        config.web_search = {
                            enabled: false,
                            cache_settings: {
                                documentation: 7,
                                error_solutions: 1,
                                package_info: 0.04,
                                man_pages: 30
                            },
                            priority_sources: [
                                "man_pages",
                                "official_docs",
                                "github_issues",
                                "stackoverflow"
                            ],
                            rate_limit_per_hour: 50
                        };
                    }

                    // Update enabled setting
                    config.web_search.enabled = (commandArg === 'on');

                    // Save updated config
                    await fs.writeFile(CONFIG_PATH, JSON.stringify(config, null, 2));

                    // Update current instance
                    assistant.config.web_search = config.web_search;

                    // Initialize or clear web searcher as needed
                    if (commandArg === 'on' && !assistant.webSearcher) {
                        assistant.webSearcher = new WebSearcher(config.web_search);
                        console.log('üåê Busca na web ativada e inicializada');
                    } else if (commandArg === 'off' && assistant.webSearcher) {
                        assistant.webSearcher = null;
                        console.log('üåê Busca na web desativada');
                    } else {
                        console.log(`üåê Busca na web ${commandArg === 'on' ? 'ativada' : 'desativada'}`);
                    }
                } catch (error) {
                    console.error('‚ùå Erro ao atualizar configura√ß√£o de busca na web:', error.message);
                }
                break;

            case '--web-status':
                if (assistant.config.web_search && assistant.config.web_search.enabled) {
                    console.log('\nüåê Status da Busca na Web: ATIVADA\n');
                    console.log('Configura√ß√µes:');
                    console.log(JSON.stringify(assistant.config.web_search, null, 2));

                    // Check if Firecrawl is configured
                    if (assistant.webSearcher && assistant.webSearcher.isFirecrawlConfigured()) {
                        console.log('\nüî• Firecrawl: CONFIGURADO');
                        console.log('Voc√™ pode usar os comandos --scrape e --crawl para extrair conte√∫do de sites.');
                    } else {
                        console.log('\nüî• Firecrawl: N√ÉO CONFIGURADO');
                        console.log('Para configurar, use: ask --firecrawl-key <sua_chave_api>');
                    }
                } else {
                    console.log('\nüåê Status da Busca na Web: DESATIVADA\n');
                    console.log('Para ativar, use: ask --web-search on');
                }
                break;

            case '--firecrawl-key':
                if (!commandArg) {
                    console.log('‚ùå Uso: ask --firecrawl-key <sua_chave_api>');
                    break;
                }

                try {
                    // Read current config
                    const configData = await fs.readFile(CONFIG_PATH, 'utf8');
                    const config = JSON.parse(configData);

                    // Update Firecrawl API key
                    config.firecrawl_api_key = commandArg;

                    // Save updated config
                    await fs.writeFile(CONFIG_PATH, JSON.stringify(config, null, 2));

                    console.log('‚úÖ Chave API do Firecrawl configurada com sucesso');
                    console.log('Reinicie o MCP Assistant para aplicar as altera√ß√µes');
                } catch (error) {
                    console.error('‚ùå Erro ao atualizar configura√ß√£o do Firecrawl:', error.message);
                }
                break;

            case '--scrape':
                if (!commandArg) {
                    console.log('‚ùå Uso: ask --scrape <url>');
                    break;
                }

                if (!assistant.webSearcher) {
                    console.log('‚ùå Web search n√£o est√° inicializado. Ative com: ask --web-search on');
                    break;
                }

                if (!assistant.webSearcher.isFirecrawlConfigured()) {
                    console.log('‚ùå Firecrawl n√£o est√° configurado. Configure com: ask --firecrawl-key <sua_chave_api>');
                    break;
                }

                try {
                    console.log(`\nüîç Extraindo conte√∫do de: ${commandArg}\n`);
                    const result = await assistant.webSearcher.scrapeWebsite(commandArg);

                    if (!result.success) {
                        console.log(`‚ùå Erro ao extrair conte√∫do: ${result.error}`);
                        break;
                    }

                    // Display the result
                    console.log('‚úÖ Conte√∫do extra√≠do com sucesso:\n');

                    if (result.data && result.data.markdown) {
                        console.log(result.data.markdown.substring(0, 1000) + '...');
                        console.log('\n(Conte√∫do truncado para exibi√ß√£o. Conte√∫do completo dispon√≠vel no objeto de resultado)');
                    } else {
                        console.log(JSON.stringify(result, null, 2));
                    }
                } catch (error) {
                    console.error('‚ùå Erro ao extrair conte√∫do:', error.message);
                }
                break;

            case '--crawl':
                if (!commandArg) {
                    console.log('‚ùå Uso: ask --crawl <url> [--limit N]');
                    break;
                }

                if (!assistant.webSearcher) {
                    console.log('‚ùå Web search n√£o est√° inicializado. Ative com: ask --web-search on');
                    break;
                }

                if (!assistant.webSearcher.isFirecrawlConfigured()) {
                    console.log('‚ùå Firecrawl n√£o est√° configurado. Configure com: ask --firecrawl-key <sua_chave_api>');
                    break;
                }

                try {
                    // Parse limit if provided
                    let limit = 10; // Default limit
                    const limitArg = args.find(arg => arg.startsWith('--limit'));
                    if (limitArg) {
                        const limitValue = limitArg.split(' ')[1] || args[args.indexOf(limitArg) + 1];
                        if (limitValue && !isNaN(parseInt(limitValue))) {
                            limit = parseInt(limitValue);
                        }
                    }

                    console.log(`\nüîç Rastreando site: ${commandArg} (limite: ${limit} p√°ginas)\n`);
                    const result = await assistant.webSearcher.crawlWebsite(commandArg, { limit });

                    if (!result.success) {
                        console.log(`‚ùå Erro ao rastrear site: ${result.error}`);
                        break;
                    }

                    // Display the result
                    console.log('‚úÖ Site rastreado com sucesso:\n');

                    if (result.data && result.data.pages) {
                        console.log(`P√°ginas rastreadas: ${result.data.pages.length}`);
                        result.data.pages.slice(0, 5).forEach((page, index) => {
                            console.log(`\n${index + 1}. ${page.url}`);
                            if (page.title) console.log(`   T√≠tulo: ${page.title}`);
                            if (page.markdown) console.log(`   Conte√∫do: ${page.markdown.substring(0, 100)}...`);
                        });

                        if (result.data.pages.length > 5) {
                            console.log('\n(Exibindo apenas as 5 primeiras p√°ginas)');
                        }
                    } else {
                        console.log(JSON.stringify(result, null, 2));
                    }
                } catch (error) {
                    console.error('‚ùå Erro ao rastrear site:', error.message);
                }
                break;

            case '--list':
            case '-l':
                const dirPath = commandArg || '.';
                const listing = await assistant.listDirectory(dirPath);
                console.log(`\nüìÇ Conte√∫do de: ${listing.currentPath}\n`);
                console.log(`   ../ (${path.basename(listing.parent)})`); // Parent directory
                listing.items.forEach(item => {
                    console.log(`   ${item.type === 'directory' ? 'üìÅ' : 'üìÑ'} ${item.name}${item.type === 'directory' ? '/' : ''}`);
                });
                console.log(`\nTotal: ${listing.items.length} itens`);
                break;

            case '--read':
            case '-r':
                if (!commandArg) throw new Error('Caminho do arquivo n√£o especificado para --read.');
                const content = await assistant.readFile(commandArg);
                console.log(`\nüìÑ Conte√∫do de: ${path.resolve(commandArg)}\n${'-'.repeat(50)}\n${content}\n${'-'.repeat(50)}`);
                break;

            case '--edit':
            case '-e':
                if (!commandArg) throw new Error('Caminho do arquivo n√£o especificado para --edit.');
                await assistant.editFile(commandArg);
                break;

            case '--delete':
            case '-d':
                if (!commandArg) throw new Error('Caminho n√£o especificado para --delete.');
                const itemInfoForDelete = await assistant.getItemInfo(commandArg);
                const itemType = itemInfoForDelete.isDirectory ? 'diret√≥rio' : 'arquivo';
                console.log(`\n‚ö†Ô∏è  Voc√™ est√° prestes a excluir o ${itemType}: ${itemInfoForDelete.path}`);
                if (itemInfoForDelete.isDirectory && itemInfoForDelete.contents > 0) {
                    console.log(`Este diret√≥rio cont√©m ${itemInfoForDelete.contents} item(ns) que tamb√©m ser√£o exclu√≠dos.`);
                }
                const confirmedDelete = await askConfirmation('Tem certeza que deseja excluir? (y/N): ');
                if (confirmedDelete) {
                    await assistant.removeItem(commandArg);
                    console.log(`\n‚úÖ ${itemType.charAt(0).toUpperCase() + itemType.slice(1)} removido com sucesso.`);
                } else {
                    console.log('Opera√ß√£o cancelada.');
                }
                break;

            case '--info':
            case '-i':
                if (!commandArg) throw new Error('Caminho n√£o especificado para --info.');
                const info = await assistant.getItemInfo(commandArg);
                console.log(`\nüìä Informa√ß√µes de: ${info.path}\n`);
                Object.entries(info).forEach(([key, value]) => {
                    if (value instanceof Date) value = value.toLocaleString();
                    if (key === 'error' && value) console.log(`   ‚ùó ${key.charAt(0).toUpperCase() + key.slice(1)}: ${value}`);
                    else if (key !== 'error') console.log(`   ${key.charAt(0).toUpperCase() + key.slice(1)}: ${value}`);
                });
                break;

            default: // Assume it's a question for the AI
                const question = args.join(' ');
                console.log('\nü§î Analisando sua pergunta com a IA...\n');
                console.log('üìù Pergunta completa:', question);

                let response = null;
                let success = false;

                try {
                    console.log('üîÑ Chamando assistant.askCommand()...');
                    response = await assistant.askCommand(question);
                    console.log('‚úÖ Resposta recebida do assistant.askCommand()');

                    if (!response) {
                        console.log('‚ö†Ô∏è Resposta vazia recebida do assistant.askCommand()');
                        console.log('‚ùå N√£o foi poss√≠vel obter uma resposta da IA. Por favor, tente novamente.');
                    } else {
                        // Imprimir a resposta diretamente para o usu√°rio com formata√ß√£o adequada
                        console.log('\n' + response + '\n');
                        success = true;
                    }
                } catch (error) {
                    console.error('‚ùå Erro ao chamar assistant.askCommand():', error);
                    console.error('Stack trace:', error.stack);
                    console.log('‚ùå Ocorreu um erro ao processar sua pergunta. Por favor, tente novamente.');
                }

                // Extract command using a more specific regex for the ```bash ... ``` block or the `COMANDO: \`...\`` format
                let extractedCommand = null;

                if (success && response) {
                    const bashBlockMatch = response.match(/```bash\s*([\s\S]+?)\s*```/m);
                    if (bashBlockMatch && bashBlockMatch[1]) {
                        extractedCommand = bashBlockMatch[1].trim();
                    } else {
                        const legacyCommandMatch = response.match(/üîß COMANDO:\s*`([^`]+)`/m);
                        if (legacyCommandMatch && legacyCommandMatch[1]) {
                            extractedCommand = legacyCommandMatch[1].trim();
                        }
                    }
                }

                if (extractedCommand) {
                    // Sanitize command a bit (remove potential leading ./ or bash )
                    extractedCommand = extractedCommand.replace(/^(\.\/|bash\s+-c\s+['"]|bash\s+)/, '').replace(/['"]$/, '');

                    await assistant.saveCommandHistory(question, extractedCommand);
                    const confirmedExecute = await askConfirmation(`\n‚ùì Deseja executar o comando sugerido: \`${extractedCommand}\` ? (y/N): `);
                    if (confirmedExecute) {
                        console.log(`\n‚ñ∂Ô∏è  Executando: ${extractedCommand}\n`);
                        try {
                            execSync(extractedCommand, { stdio: 'inherit' });
                        } catch (execError) {
                            console.error(`\n‚ùå Erro ao executar comando: ${execError.message}`);
                            // execSync throws on non-zero exit, which is often not an "error" in shell sense
                            // but rather the command finished with a specific status.
                            // stderr is already inherited, so specific error details from the command should be visible.
                        }
                    } else {
                        console.log('Comando n√£o executado.');
                    }
                } else {
                    console.log('\n‚ÑπÔ∏è N√£o foi poss√≠vel extrair um comando execut√°vel da resposta.');
                }
                break;
        }
    } catch (error) {
        console.error(`\n‚ùå Erro inesperado na opera√ß√£o: ${error.message}`);
        // console.error(error.stack); // Uncomment for more detailed debug info
        process.exitCode = 1; // Set exit code to indicate failure
    } finally {
        rl.close();
    }
}

// Ensure main is called only when script is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
    main().catch(err => {
        console.error("‚ùå Falha cr√≠tica no script:", err);
        process.exit(1);
    });
}

export default MCPAssistant;
