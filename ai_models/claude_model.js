// ~/.mcp-terminal/ai_models/claude_model.js
// Implementa√ß√£o do modelo Claude da Anthropic

import { Anthropic } from '@anthropic-ai/sdk';
import BaseAIModel from './base_model.js';

export default class ClaudeModel extends BaseAIModel {
    constructor(config) {
        super(config);
        this.apiKey = config.anthropic_api_key;
        this.modelName = config.claude_model || 'claude-3-7-sonnet-20250219';
        this.client = null;
    }

    async initialize() {
        if (!this.apiKey) {
            throw new Error('Chave de API da Anthropic n√£o configurada');
        }

        this.client = new Anthropic({
            apiKey: this.apiKey
        });
        
        return this;
    }

    async analyzeCommand(commandData) {
        try {
            const { command, exitCode, stdout, stderr, duration, systemContext } = commandData;

            const prompt = `Voc√™ √© um especialista em Linux que analisa comandos que falharam.

SISTEMA:
- OS: ${systemContext.os}
- Distribui√ß√£o: ${systemContext.distro} ${systemContext.version}
- Package Manager: ${systemContext.packageManager}
- Shell: ${systemContext.shell}

COMANDO EXECUTADO: ${command}
EXIT CODE: ${exitCode}
TEMPO DE EXECU√á√ÉO: ${duration}s

STDOUT:
${stdout || '(vazio)'}

STDERR:
${stderr || '(vazio)'}

AN√ÅLISE NECESS√ÅRIA:
1. Identifique o problema principal
2. Explique a causa do erro
3. Forne√ßa uma solu√ß√£o espec√≠fica para este sistema Linux
4. Sugira um comando para corrigir (se aplic√°vel)
5. Inclua comandos preventivos se relevante

FORMATO DA RESPOSTA:
üîç PROBLEMA: [Descri√ß√£o clara do problema]
üõ†Ô∏è  SOLU√á√ÉO: [Explica√ß√£o da solu√ß√£o]
üíª COMANDO: [Comando espec√≠fico para corrigir, se aplic√°vel]
‚ö†Ô∏è  PREVEN√á√ÉO: [Como evitar no futuro]

Seja conciso e espec√≠fico para o sistema detectado.`;

            const response = await this.client.messages.create({
                model: this.modelName,
                max_tokens: 1500,
                messages: [{
                    role: 'user',
                    content: prompt
                }]
            });

            const analysis = response.content[0].text;
            
            // Extrai comando sugerido da resposta
            const commandMatch = analysis.match(/üíª COMANDO: (.+?)(?:\n|$)/);
            const command = commandMatch ? commandMatch[1].replace(/`/g, '').trim() : null;

            return {
                description: analysis,
                command: command,
                confidence: 0.8,
                category: 'llm_analysis',
                source: 'anthropic_claude'
            };

        } catch (error) {
            console.error('Erro na an√°lise com Claude:', error);
            return null;
        }
    }

    async askCommand(question, systemContext) {
        try {
            const prompt = `Voc√™ √© um assistente especializado em Linux/Unix que ajuda usu√°rios a encontrar o comando correto para suas tarefas.

INFORMA√á√ïES DO SISTEMA:
- OS: ${systemContext.os}
- Distribui√ß√£o: ${systemContext.distro}
- Vers√£o: ${systemContext.version}
- Package Manager: ${systemContext.packageManager}
- Shell: ${systemContext.shell}
- Arquitetura: ${systemContext.architecture}
- Kernel: ${systemContext.kernel}
- Capacidades: ${systemContext.capabilities.join(', ')}

COMANDOS DISPON√çVEIS NESTE SISTEMA:
${JSON.stringify(systemContext.commands, null, 2)}

PERGUNTA DO USU√ÅRIO: ${question}

INSTRU√á√ïES:
1. Analise a pergunta considerando o sistema espec√≠fico do usu√°rio
2. Forne√ßa o comando exato para a distribui√ß√£o/sistema detectado
3. Explique brevemente o que o comando faz
4. Se houver varia√ß√µes por distribui√ß√£o, mencione isso
5. Inclua op√ß√µes √∫teis do comando
6. Se apropriado, sugira comandos relacionados

FORMATO DA RESPOSTA:
üîß COMANDO:
\`comando exato aqui\`

üìù EXPLICA√á√ÉO:
[Explica√ß√£o clara do que faz]

üí° OP√á√ïES √öTEIS:
[Varia√ß√µes ou op√ß√µes importantes]

‚ö†Ô∏è OBSERVA√á√ïES:
[Avisos ou considera√ß√µes especiais]

Responda de forma direta e pr√°tica.`;

            const response = await this.client.messages.create({
                model: this.modelName,
                max_tokens: 2000,
                messages: [{
                    role: 'user',
                    content: prompt
                }]
            });

            return response.content[0].text;
        } catch (error) {
            console.error('Erro ao consultar Claude:', error);
            return `‚ùå Erro ao conectar com o assistente Claude. Verifique sua configura√ß√£o da API Anthropic.`;
        }
    }

    getProviderName() {
        return 'Claude (Anthropic)';
    }

    getModelName() {
        return this.modelName;
    }

    async validateApiKey() {
        try {
            // Tenta fazer uma chamada simples para validar a API key
            const response = await this.client.messages.create({
                model: this.modelName,
                max_tokens: 10,
                messages: [{
                    role: 'user',
                    content: 'Hello'
                }]
            });
            
            return true;
        } catch (error) {
            console.error('Erro ao validar API key do Claude:', error);
            return false;
        }
    }
}